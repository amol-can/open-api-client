/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.c24.giro.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.c24.giro.client.model.Bank;
import de.c24.giro.client.model.BankingAppGrades;
import de.c24.giro.client.model.Bonus;
import de.c24.giro.client.model.CashWithdrawalConditions;
import de.c24.giro.client.model.CashWithdrawalInRegion;
import de.c24.giro.client.model.Cashback;
import de.c24.giro.client.model.CreditCard;
import de.c24.giro.client.model.DebitCard;
import de.c24.giro.client.model.Doc;
import de.c24.giro.client.model.Fees;
import de.c24.giro.client.model.GiroCard;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.c24.giro.client.JSON;

/**
 * Product
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T13:18:43.362+02:00[Europe/Berlin]")
public class Product {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ACTIVE_SINCE = "activeSince";
  @SerializedName(SERIALIZED_NAME_ACTIVE_SINCE)
  private OffsetDateTime activeSince;

  public static final String SERIALIZED_NAME_ACTIVE_UNTIL = "activeUntil";
  @SerializedName(SERIALIZED_NAME_ACTIVE_UNTIL)
  private OffsetDateTime activeUntil;

  public static final String SERIALIZED_NAME_BANK = "bank";
  @SerializedName(SERIALIZED_NAME_BANK)
  private Bank bank;

  /**
   * Gets or Sets accountAccessWays
   */
  @JsonAdapter(AccountAccessWaysEnum.Adapter.class)
  public enum AccountAccessWaysEnum {
    BRANCH("BRANCH"),
    
    ONLINE("ONLINE"),
    
    PHONE("PHONE");

    private String value;

    AccountAccessWaysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountAccessWaysEnum fromValue(String value) {
      for (AccountAccessWaysEnum b : AccountAccessWaysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountAccessWaysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountAccessWaysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountAccessWaysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountAccessWaysEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_ACCESS_WAYS = "accountAccessWays";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ACCESS_WAYS)
  private Set<AccountAccessWaysEnum> accountAccessWays = null;

  public static final String SERIALIZED_NAME_BRANCHES_NUMBER = "branchesNumber";
  @SerializedName(SERIALIZED_NAME_BRANCHES_NUMBER)
  private Long branchesNumber;

  public static final String SERIALIZED_NAME_BANKING_APP_GRADES = "bankingAppGrades";
  @SerializedName(SERIALIZED_NAME_BANKING_APP_GRADES)
  private BankingAppGrades bankingAppGrades;

  /**
   * Gets or Sets onlineBankingSafetyProcedures
   */
  @JsonAdapter(OnlineBankingSafetyProceduresEnum.Adapter.class)
  public enum OnlineBankingSafetyProceduresEnum {
    I_TAN("I_TAN"),
    
    MOBILE_TAN("MOBILE_TAN"),
    
    APP_TAN("APP_TAN"),
    
    FIN_TS("FIN_TS"),
    
    TAN_GENERATOR("TAN_GENERATOR"),
    
    SMART_SECURE_APP("SMART_SECURE_APP"),
    
    CHIP_TAN("CHIP_TAN"),
    
    PUSH_TAN("PUSH_TAN"),
    
    PHOTO_TAN("PHOTO_TAN"),
    
    QR_TAN("QR_TAN"),
    
    TAN_BOX("TAN_BOX");

    private String value;

    OnlineBankingSafetyProceduresEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OnlineBankingSafetyProceduresEnum fromValue(String value) {
      for (OnlineBankingSafetyProceduresEnum b : OnlineBankingSafetyProceduresEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OnlineBankingSafetyProceduresEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OnlineBankingSafetyProceduresEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OnlineBankingSafetyProceduresEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OnlineBankingSafetyProceduresEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ONLINE_BANKING_SAFETY_PROCEDURES = "onlineBankingSafetyProcedures";
  @SerializedName(SERIALIZED_NAME_ONLINE_BANKING_SAFETY_PROCEDURES)
  private Set<OnlineBankingSafetyProceduresEnum> onlineBankingSafetyProcedures = null;

  public static final String SERIALIZED_NAME_PERSONAL_CONSULTATIONS_SERVICE_AVAILABLE = "personalConsultationsServiceAvailable";
  @SerializedName(SERIALIZED_NAME_PERSONAL_CONSULTATIONS_SERVICE_AVAILABLE)
  private Boolean personalConsultationsServiceAvailable;

  public static final String SERIALIZED_NAME_SPECIAL_FEATURES = "specialFeatures";
  @SerializedName(SERIALIZED_NAME_SPECIAL_FEATURES)
  private String specialFeatures;

  public static final String SERIALIZED_NAME_GIRO_CARD = "giroCard";
  @SerializedName(SERIALIZED_NAME_GIRO_CARD)
  private GiroCard giroCard;

  public static final String SERIALIZED_NAME_DEBIT_CARD = "debitCard";
  @SerializedName(SERIALIZED_NAME_DEBIT_CARD)
  private DebitCard debitCard;

  public static final String SERIALIZED_NAME_CREDIT_CARD = "creditCard";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD)
  private CreditCard creditCard;

  /**
   * Gets or Sets paymentApps
   */
  @JsonAdapter(PaymentAppsEnum.Adapter.class)
  public enum PaymentAppsEnum {
    APPLE_PAY("APPLE_PAY"),
    
    GOOGLE_PAY("GOOGLE_PAY");

    private String value;

    PaymentAppsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentAppsEnum fromValue(String value) {
      for (PaymentAppsEnum b : PaymentAppsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentAppsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentAppsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentAppsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentAppsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_APPS = "paymentApps";
  @SerializedName(SERIALIZED_NAME_PAYMENT_APPS)
  private Set<PaymentAppsEnum> paymentApps = null;

  public static final String SERIALIZED_NAME_GIRO_CARD_CASH_WITHDRAWAL_CONDITIONS = "giroCardCashWithdrawalConditions";
  @SerializedName(SERIALIZED_NAME_GIRO_CARD_CASH_WITHDRAWAL_CONDITIONS)
  private CashWithdrawalConditions giroCardCashWithdrawalConditions;

  public static final String SERIALIZED_NAME_DEBIT_CARD_CASH_WITHDRAWAL_CONDITIONS = "debitCardCashWithdrawalConditions";
  @SerializedName(SERIALIZED_NAME_DEBIT_CARD_CASH_WITHDRAWAL_CONDITIONS)
  private CashWithdrawalConditions debitCardCashWithdrawalConditions;

  public static final String SERIALIZED_NAME_CREDIT_CARD_CASH_WITHDRAWAL_CONDITIONS = "creditCardCashWithdrawalConditions";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD_CASH_WITHDRAWAL_CONDITIONS)
  private CashWithdrawalConditions creditCardCashWithdrawalConditions;

  public static final String SERIALIZED_NAME_FREE_CASH_WITHDRAWAL_ABROAD = "freeCashWithdrawalAbroad";
  @SerializedName(SERIALIZED_NAME_FREE_CASH_WITHDRAWAL_ABROAD)
  private Boolean freeCashWithdrawalAbroad;

  public static final String SERIALIZED_NAME_CASH_WITHDRAWAL_BY_DEBIT_CARD_IN_REGION = "cashWithdrawalByDebitCardInRegion";
  @SerializedName(SERIALIZED_NAME_CASH_WITHDRAWAL_BY_DEBIT_CARD_IN_REGION)
  private CashWithdrawalInRegion cashWithdrawalByDebitCardInRegion;

  public static final String SERIALIZED_NAME_CASH_WITHDRAWAL_BY_CREDIT_CARD_IN_REGION = "cashWithdrawalByCreditCardInRegion";
  @SerializedName(SERIALIZED_NAME_CASH_WITHDRAWAL_BY_CREDIT_CARD_IN_REGION)
  private CashWithdrawalInRegion cashWithdrawalByCreditCardInRegion;

  public static final String SERIALIZED_NAME_CASH_WITHDRAWAL_IN_SHOP = "cashWithdrawalInShop";
  @SerializedName(SERIALIZED_NAME_CASH_WITHDRAWAL_IN_SHOP)
  private Boolean cashWithdrawalInShop;

  /**
   * Gets or Sets cashDepositCondition
   */
  @JsonAdapter(CashDepositConditionEnum.Adapter.class)
  public enum CashDepositConditionEnum {
    FREE("FREE"),
    
    CONDITIONALLY_FREE("CONDITIONALLY_FREE"),
    
    CHARGEABLE("CHARGEABLE");

    private String value;

    CashDepositConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CashDepositConditionEnum fromValue(String value) {
      for (CashDepositConditionEnum b : CashDepositConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CashDepositConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CashDepositConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CashDepositConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CashDepositConditionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CASH_DEPOSIT_CONDITION = "cashDepositCondition";
  @SerializedName(SERIALIZED_NAME_CASH_DEPOSIT_CONDITION)
  private CashDepositConditionEnum cashDepositCondition;

  /**
   * Gets or Sets otherBankServices
   */
  @JsonAdapter(OtherBankServicesEnum.Adapter.class)
  public enum OtherBankServicesEnum {
    SECURITIES_ACCOUNT("SECURITIES_ACCOUNT"),
    
    SAVINGS_PLANS("SAVINGS_PLANS"),
    
    CRYPTO("CRYPTO"),
    
    FOREIGN_CURRENCIES("FOREIGN_CURRENCIES"),
    
    ASSET_MANAGEMENT("ASSET_MANAGEMENT");

    private String value;

    OtherBankServicesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OtherBankServicesEnum fromValue(String value) {
      for (OtherBankServicesEnum b : OtherBankServicesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OtherBankServicesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OtherBankServicesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OtherBankServicesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OtherBankServicesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OTHER_BANK_SERVICES = "otherBankServices";
  @SerializedName(SERIALIZED_NAME_OTHER_BANK_SERVICES)
  private Set<OtherBankServicesEnum> otherBankServices = null;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private Fees fees;

  public static final String SERIALIZED_NAME_BONUS = "bonus";
  @SerializedName(SERIALIZED_NAME_BONUS)
  private Bonus bonus;

  public static final String SERIALIZED_NAME_CASHBACK = "cashback";
  @SerializedName(SERIALIZED_NAME_CASHBACK)
  private Cashback cashback;

  public static final String SERIALIZED_NAME_CREDIT_INTEREST = "creditInterest";
  @SerializedName(SERIALIZED_NAME_CREDIT_INTEREST)
  private Float creditInterest;

  public static final String SERIALIZED_NAME_DEPOSIT_GUARANTEE = "depositGuarantee";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_GUARANTEE)
  private String depositGuarantee;

  /**
   * Gets or Sets sustainabilityType
   */
  @JsonAdapter(SustainabilityTypeEnum.Adapter.class)
  public enum SustainabilityTypeEnum {
    NO_ACTIVITIES("NO_ACTIVITIES"),
    
    CLIMATE_POSITIVE("CLIMATE_POSITIVE"),
    
    CLIMATE_NEUTRAL("CLIMATE_NEUTRAL"),
    
    ENVIRONMENTAL_PROJECT("ENVIRONMENTAL_PROJECT");

    private String value;

    SustainabilityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SustainabilityTypeEnum fromValue(String value) {
      for (SustainabilityTypeEnum b : SustainabilityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SustainabilityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SustainabilityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SustainabilityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SustainabilityTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUSTAINABILITY_TYPE = "sustainabilityType";
  @SerializedName(SERIALIZED_NAME_SUSTAINABILITY_TYPE)
  private SustainabilityTypeEnum sustainabilityType;

  public static final String SERIALIZED_NAME_DOCS = "docs";
  @SerializedName(SERIALIZED_NAME_DOCS)
  private List<Doc> docs = null;

  public Product() {
  }

  public Product key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public Product id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Product name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Product activeSince(OffsetDateTime activeSince) {
    
    this.activeSince = activeSince;
    return this;
  }

   /**
   * Get activeSince
   * @return activeSince
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getActiveSince() {
    return activeSince;
  }


  public void setActiveSince(OffsetDateTime activeSince) {
    this.activeSince = activeSince;
  }


  public Product activeUntil(OffsetDateTime activeUntil) {
    
    this.activeUntil = activeUntil;
    return this;
  }

   /**
   * Get activeUntil
   * @return activeUntil
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getActiveUntil() {
    return activeUntil;
  }


  public void setActiveUntil(OffsetDateTime activeUntil) {
    this.activeUntil = activeUntil;
  }


  public Product bank(Bank bank) {
    
    this.bank = bank;
    return this;
  }

   /**
   * Get bank
   * @return bank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Bank getBank() {
    return bank;
  }


  public void setBank(Bank bank) {
    this.bank = bank;
  }


  public Product accountAccessWays(Set<AccountAccessWaysEnum> accountAccessWays) {
    
    this.accountAccessWays = accountAccessWays;
    return this;
  }

  public Product addAccountAccessWaysItem(AccountAccessWaysEnum accountAccessWaysItem) {
    if (this.accountAccessWays == null) {
      this.accountAccessWays = new LinkedHashSet<>();
    }
    this.accountAccessWays.add(accountAccessWaysItem);
    return this;
  }

   /**
   * Get accountAccessWays
   * @return accountAccessWays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<AccountAccessWaysEnum> getAccountAccessWays() {
    return accountAccessWays;
  }


  public void setAccountAccessWays(Set<AccountAccessWaysEnum> accountAccessWays) {
    this.accountAccessWays = accountAccessWays;
  }


  public Product branchesNumber(Long branchesNumber) {
    
    this.branchesNumber = branchesNumber;
    return this;
  }

   /**
   * Get branchesNumber
   * @return branchesNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getBranchesNumber() {
    return branchesNumber;
  }


  public void setBranchesNumber(Long branchesNumber) {
    this.branchesNumber = branchesNumber;
  }


  public Product bankingAppGrades(BankingAppGrades bankingAppGrades) {
    
    this.bankingAppGrades = bankingAppGrades;
    return this;
  }

   /**
   * Get bankingAppGrades
   * @return bankingAppGrades
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BankingAppGrades getBankingAppGrades() {
    return bankingAppGrades;
  }


  public void setBankingAppGrades(BankingAppGrades bankingAppGrades) {
    this.bankingAppGrades = bankingAppGrades;
  }


  public Product onlineBankingSafetyProcedures(Set<OnlineBankingSafetyProceduresEnum> onlineBankingSafetyProcedures) {
    
    this.onlineBankingSafetyProcedures = onlineBankingSafetyProcedures;
    return this;
  }

  public Product addOnlineBankingSafetyProceduresItem(OnlineBankingSafetyProceduresEnum onlineBankingSafetyProceduresItem) {
    if (this.onlineBankingSafetyProcedures == null) {
      this.onlineBankingSafetyProcedures = new LinkedHashSet<>();
    }
    this.onlineBankingSafetyProcedures.add(onlineBankingSafetyProceduresItem);
    return this;
  }

   /**
   * Get onlineBankingSafetyProcedures
   * @return onlineBankingSafetyProcedures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<OnlineBankingSafetyProceduresEnum> getOnlineBankingSafetyProcedures() {
    return onlineBankingSafetyProcedures;
  }


  public void setOnlineBankingSafetyProcedures(Set<OnlineBankingSafetyProceduresEnum> onlineBankingSafetyProcedures) {
    this.onlineBankingSafetyProcedures = onlineBankingSafetyProcedures;
  }


  public Product personalConsultationsServiceAvailable(Boolean personalConsultationsServiceAvailable) {
    
    this.personalConsultationsServiceAvailable = personalConsultationsServiceAvailable;
    return this;
  }

   /**
   * Get personalConsultationsServiceAvailable
   * @return personalConsultationsServiceAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPersonalConsultationsServiceAvailable() {
    return personalConsultationsServiceAvailable;
  }


  public void setPersonalConsultationsServiceAvailable(Boolean personalConsultationsServiceAvailable) {
    this.personalConsultationsServiceAvailable = personalConsultationsServiceAvailable;
  }


  public Product specialFeatures(String specialFeatures) {
    
    this.specialFeatures = specialFeatures;
    return this;
  }

   /**
   * Get specialFeatures
   * @return specialFeatures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSpecialFeatures() {
    return specialFeatures;
  }


  public void setSpecialFeatures(String specialFeatures) {
    this.specialFeatures = specialFeatures;
  }


  public Product giroCard(GiroCard giroCard) {
    
    this.giroCard = giroCard;
    return this;
  }

   /**
   * Get giroCard
   * @return giroCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GiroCard getGiroCard() {
    return giroCard;
  }


  public void setGiroCard(GiroCard giroCard) {
    this.giroCard = giroCard;
  }


  public Product debitCard(DebitCard debitCard) {
    
    this.debitCard = debitCard;
    return this;
  }

   /**
   * Get debitCard
   * @return debitCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DebitCard getDebitCard() {
    return debitCard;
  }


  public void setDebitCard(DebitCard debitCard) {
    this.debitCard = debitCard;
  }


  public Product creditCard(CreditCard creditCard) {
    
    this.creditCard = creditCard;
    return this;
  }

   /**
   * Get creditCard
   * @return creditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreditCard getCreditCard() {
    return creditCard;
  }


  public void setCreditCard(CreditCard creditCard) {
    this.creditCard = creditCard;
  }


  public Product paymentApps(Set<PaymentAppsEnum> paymentApps) {
    
    this.paymentApps = paymentApps;
    return this;
  }

  public Product addPaymentAppsItem(PaymentAppsEnum paymentAppsItem) {
    if (this.paymentApps == null) {
      this.paymentApps = new LinkedHashSet<>();
    }
    this.paymentApps.add(paymentAppsItem);
    return this;
  }

   /**
   * Get paymentApps
   * @return paymentApps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<PaymentAppsEnum> getPaymentApps() {
    return paymentApps;
  }


  public void setPaymentApps(Set<PaymentAppsEnum> paymentApps) {
    this.paymentApps = paymentApps;
  }


  public Product giroCardCashWithdrawalConditions(CashWithdrawalConditions giroCardCashWithdrawalConditions) {
    
    this.giroCardCashWithdrawalConditions = giroCardCashWithdrawalConditions;
    return this;
  }

   /**
   * Get giroCardCashWithdrawalConditions
   * @return giroCardCashWithdrawalConditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CashWithdrawalConditions getGiroCardCashWithdrawalConditions() {
    return giroCardCashWithdrawalConditions;
  }


  public void setGiroCardCashWithdrawalConditions(CashWithdrawalConditions giroCardCashWithdrawalConditions) {
    this.giroCardCashWithdrawalConditions = giroCardCashWithdrawalConditions;
  }


  public Product debitCardCashWithdrawalConditions(CashWithdrawalConditions debitCardCashWithdrawalConditions) {
    
    this.debitCardCashWithdrawalConditions = debitCardCashWithdrawalConditions;
    return this;
  }

   /**
   * Get debitCardCashWithdrawalConditions
   * @return debitCardCashWithdrawalConditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CashWithdrawalConditions getDebitCardCashWithdrawalConditions() {
    return debitCardCashWithdrawalConditions;
  }


  public void setDebitCardCashWithdrawalConditions(CashWithdrawalConditions debitCardCashWithdrawalConditions) {
    this.debitCardCashWithdrawalConditions = debitCardCashWithdrawalConditions;
  }


  public Product creditCardCashWithdrawalConditions(CashWithdrawalConditions creditCardCashWithdrawalConditions) {
    
    this.creditCardCashWithdrawalConditions = creditCardCashWithdrawalConditions;
    return this;
  }

   /**
   * Get creditCardCashWithdrawalConditions
   * @return creditCardCashWithdrawalConditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CashWithdrawalConditions getCreditCardCashWithdrawalConditions() {
    return creditCardCashWithdrawalConditions;
  }


  public void setCreditCardCashWithdrawalConditions(CashWithdrawalConditions creditCardCashWithdrawalConditions) {
    this.creditCardCashWithdrawalConditions = creditCardCashWithdrawalConditions;
  }


  public Product freeCashWithdrawalAbroad(Boolean freeCashWithdrawalAbroad) {
    
    this.freeCashWithdrawalAbroad = freeCashWithdrawalAbroad;
    return this;
  }

   /**
   * Get freeCashWithdrawalAbroad
   * @return freeCashWithdrawalAbroad
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getFreeCashWithdrawalAbroad() {
    return freeCashWithdrawalAbroad;
  }


  public void setFreeCashWithdrawalAbroad(Boolean freeCashWithdrawalAbroad) {
    this.freeCashWithdrawalAbroad = freeCashWithdrawalAbroad;
  }


  public Product cashWithdrawalByDebitCardInRegion(CashWithdrawalInRegion cashWithdrawalByDebitCardInRegion) {
    
    this.cashWithdrawalByDebitCardInRegion = cashWithdrawalByDebitCardInRegion;
    return this;
  }

   /**
   * Get cashWithdrawalByDebitCardInRegion
   * @return cashWithdrawalByDebitCardInRegion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CashWithdrawalInRegion getCashWithdrawalByDebitCardInRegion() {
    return cashWithdrawalByDebitCardInRegion;
  }


  public void setCashWithdrawalByDebitCardInRegion(CashWithdrawalInRegion cashWithdrawalByDebitCardInRegion) {
    this.cashWithdrawalByDebitCardInRegion = cashWithdrawalByDebitCardInRegion;
  }


  public Product cashWithdrawalByCreditCardInRegion(CashWithdrawalInRegion cashWithdrawalByCreditCardInRegion) {
    
    this.cashWithdrawalByCreditCardInRegion = cashWithdrawalByCreditCardInRegion;
    return this;
  }

   /**
   * Get cashWithdrawalByCreditCardInRegion
   * @return cashWithdrawalByCreditCardInRegion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CashWithdrawalInRegion getCashWithdrawalByCreditCardInRegion() {
    return cashWithdrawalByCreditCardInRegion;
  }


  public void setCashWithdrawalByCreditCardInRegion(CashWithdrawalInRegion cashWithdrawalByCreditCardInRegion) {
    this.cashWithdrawalByCreditCardInRegion = cashWithdrawalByCreditCardInRegion;
  }


  public Product cashWithdrawalInShop(Boolean cashWithdrawalInShop) {
    
    this.cashWithdrawalInShop = cashWithdrawalInShop;
    return this;
  }

   /**
   * Get cashWithdrawalInShop
   * @return cashWithdrawalInShop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCashWithdrawalInShop() {
    return cashWithdrawalInShop;
  }


  public void setCashWithdrawalInShop(Boolean cashWithdrawalInShop) {
    this.cashWithdrawalInShop = cashWithdrawalInShop;
  }


  public Product cashDepositCondition(CashDepositConditionEnum cashDepositCondition) {
    
    this.cashDepositCondition = cashDepositCondition;
    return this;
  }

   /**
   * Get cashDepositCondition
   * @return cashDepositCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CashDepositConditionEnum getCashDepositCondition() {
    return cashDepositCondition;
  }


  public void setCashDepositCondition(CashDepositConditionEnum cashDepositCondition) {
    this.cashDepositCondition = cashDepositCondition;
  }


  public Product otherBankServices(Set<OtherBankServicesEnum> otherBankServices) {
    
    this.otherBankServices = otherBankServices;
    return this;
  }

  public Product addOtherBankServicesItem(OtherBankServicesEnum otherBankServicesItem) {
    if (this.otherBankServices == null) {
      this.otherBankServices = new LinkedHashSet<>();
    }
    this.otherBankServices.add(otherBankServicesItem);
    return this;
  }

   /**
   * Get otherBankServices
   * @return otherBankServices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<OtherBankServicesEnum> getOtherBankServices() {
    return otherBankServices;
  }


  public void setOtherBankServices(Set<OtherBankServicesEnum> otherBankServices) {
    this.otherBankServices = otherBankServices;
  }


  public Product fees(Fees fees) {
    
    this.fees = fees;
    return this;
  }

   /**
   * Get fees
   * @return fees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Fees getFees() {
    return fees;
  }


  public void setFees(Fees fees) {
    this.fees = fees;
  }


  public Product bonus(Bonus bonus) {
    
    this.bonus = bonus;
    return this;
  }

   /**
   * Get bonus
   * @return bonus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Bonus getBonus() {
    return bonus;
  }


  public void setBonus(Bonus bonus) {
    this.bonus = bonus;
  }


  public Product cashback(Cashback cashback) {
    
    this.cashback = cashback;
    return this;
  }

   /**
   * Get cashback
   * @return cashback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Cashback getCashback() {
    return cashback;
  }


  public void setCashback(Cashback cashback) {
    this.cashback = cashback;
  }


  public Product creditInterest(Float creditInterest) {
    
    this.creditInterest = creditInterest;
    return this;
  }

   /**
   * Get creditInterest
   * @return creditInterest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getCreditInterest() {
    return creditInterest;
  }


  public void setCreditInterest(Float creditInterest) {
    this.creditInterest = creditInterest;
  }


  public Product depositGuarantee(String depositGuarantee) {
    
    this.depositGuarantee = depositGuarantee;
    return this;
  }

   /**
   * Get depositGuarantee
   * @return depositGuarantee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepositGuarantee() {
    return depositGuarantee;
  }


  public void setDepositGuarantee(String depositGuarantee) {
    this.depositGuarantee = depositGuarantee;
  }


  public Product sustainabilityType(SustainabilityTypeEnum sustainabilityType) {
    
    this.sustainabilityType = sustainabilityType;
    return this;
  }

   /**
   * Get sustainabilityType
   * @return sustainabilityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SustainabilityTypeEnum getSustainabilityType() {
    return sustainabilityType;
  }


  public void setSustainabilityType(SustainabilityTypeEnum sustainabilityType) {
    this.sustainabilityType = sustainabilityType;
  }


  public Product docs(List<Doc> docs) {
    
    this.docs = docs;
    return this;
  }

  public Product addDocsItem(Doc docsItem) {
    if (this.docs == null) {
      this.docs = new ArrayList<>();
    }
    this.docs.add(docsItem);
    return this;
  }

   /**
   * Get docs
   * @return docs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Doc> getDocs() {
    return docs;
  }


  public void setDocs(List<Doc> docs) {
    this.docs = docs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.key, product.key) &&
        Objects.equals(this.id, product.id) &&
        Objects.equals(this.name, product.name) &&
        Objects.equals(this.activeSince, product.activeSince) &&
        Objects.equals(this.activeUntil, product.activeUntil) &&
        Objects.equals(this.bank, product.bank) &&
        Objects.equals(this.accountAccessWays, product.accountAccessWays) &&
        Objects.equals(this.branchesNumber, product.branchesNumber) &&
        Objects.equals(this.bankingAppGrades, product.bankingAppGrades) &&
        Objects.equals(this.onlineBankingSafetyProcedures, product.onlineBankingSafetyProcedures) &&
        Objects.equals(this.personalConsultationsServiceAvailable, product.personalConsultationsServiceAvailable) &&
        Objects.equals(this.specialFeatures, product.specialFeatures) &&
        Objects.equals(this.giroCard, product.giroCard) &&
        Objects.equals(this.debitCard, product.debitCard) &&
        Objects.equals(this.creditCard, product.creditCard) &&
        Objects.equals(this.paymentApps, product.paymentApps) &&
        Objects.equals(this.giroCardCashWithdrawalConditions, product.giroCardCashWithdrawalConditions) &&
        Objects.equals(this.debitCardCashWithdrawalConditions, product.debitCardCashWithdrawalConditions) &&
        Objects.equals(this.creditCardCashWithdrawalConditions, product.creditCardCashWithdrawalConditions) &&
        Objects.equals(this.freeCashWithdrawalAbroad, product.freeCashWithdrawalAbroad) &&
        Objects.equals(this.cashWithdrawalByDebitCardInRegion, product.cashWithdrawalByDebitCardInRegion) &&
        Objects.equals(this.cashWithdrawalByCreditCardInRegion, product.cashWithdrawalByCreditCardInRegion) &&
        Objects.equals(this.cashWithdrawalInShop, product.cashWithdrawalInShop) &&
        Objects.equals(this.cashDepositCondition, product.cashDepositCondition) &&
        Objects.equals(this.otherBankServices, product.otherBankServices) &&
        Objects.equals(this.fees, product.fees) &&
        Objects.equals(this.bonus, product.bonus) &&
        Objects.equals(this.cashback, product.cashback) &&
        Objects.equals(this.creditInterest, product.creditInterest) &&
        Objects.equals(this.depositGuarantee, product.depositGuarantee) &&
        Objects.equals(this.sustainabilityType, product.sustainabilityType) &&
        Objects.equals(this.docs, product.docs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, id, name, activeSince, activeUntil, bank, accountAccessWays, branchesNumber, bankingAppGrades, onlineBankingSafetyProcedures, personalConsultationsServiceAvailable, specialFeatures, giroCard, debitCard, creditCard, paymentApps, giroCardCashWithdrawalConditions, debitCardCashWithdrawalConditions, creditCardCashWithdrawalConditions, freeCashWithdrawalAbroad, cashWithdrawalByDebitCardInRegion, cashWithdrawalByCreditCardInRegion, cashWithdrawalInShop, cashDepositCondition, otherBankServices, fees, bonus, cashback, creditInterest, depositGuarantee, sustainabilityType, docs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    activeSince: ").append(toIndentedString(activeSince)).append("\n");
    sb.append("    activeUntil: ").append(toIndentedString(activeUntil)).append("\n");
    sb.append("    bank: ").append(toIndentedString(bank)).append("\n");
    sb.append("    accountAccessWays: ").append(toIndentedString(accountAccessWays)).append("\n");
    sb.append("    branchesNumber: ").append(toIndentedString(branchesNumber)).append("\n");
    sb.append("    bankingAppGrades: ").append(toIndentedString(bankingAppGrades)).append("\n");
    sb.append("    onlineBankingSafetyProcedures: ").append(toIndentedString(onlineBankingSafetyProcedures)).append("\n");
    sb.append("    personalConsultationsServiceAvailable: ").append(toIndentedString(personalConsultationsServiceAvailable)).append("\n");
    sb.append("    specialFeatures: ").append(toIndentedString(specialFeatures)).append("\n");
    sb.append("    giroCard: ").append(toIndentedString(giroCard)).append("\n");
    sb.append("    debitCard: ").append(toIndentedString(debitCard)).append("\n");
    sb.append("    creditCard: ").append(toIndentedString(creditCard)).append("\n");
    sb.append("    paymentApps: ").append(toIndentedString(paymentApps)).append("\n");
    sb.append("    giroCardCashWithdrawalConditions: ").append(toIndentedString(giroCardCashWithdrawalConditions)).append("\n");
    sb.append("    debitCardCashWithdrawalConditions: ").append(toIndentedString(debitCardCashWithdrawalConditions)).append("\n");
    sb.append("    creditCardCashWithdrawalConditions: ").append(toIndentedString(creditCardCashWithdrawalConditions)).append("\n");
    sb.append("    freeCashWithdrawalAbroad: ").append(toIndentedString(freeCashWithdrawalAbroad)).append("\n");
    sb.append("    cashWithdrawalByDebitCardInRegion: ").append(toIndentedString(cashWithdrawalByDebitCardInRegion)).append("\n");
    sb.append("    cashWithdrawalByCreditCardInRegion: ").append(toIndentedString(cashWithdrawalByCreditCardInRegion)).append("\n");
    sb.append("    cashWithdrawalInShop: ").append(toIndentedString(cashWithdrawalInShop)).append("\n");
    sb.append("    cashDepositCondition: ").append(toIndentedString(cashDepositCondition)).append("\n");
    sb.append("    otherBankServices: ").append(toIndentedString(otherBankServices)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    bonus: ").append(toIndentedString(bonus)).append("\n");
    sb.append("    cashback: ").append(toIndentedString(cashback)).append("\n");
    sb.append("    creditInterest: ").append(toIndentedString(creditInterest)).append("\n");
    sb.append("    depositGuarantee: ").append(toIndentedString(depositGuarantee)).append("\n");
    sb.append("    sustainabilityType: ").append(toIndentedString(sustainabilityType)).append("\n");
    sb.append("    docs: ").append(toIndentedString(docs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("key");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("activeSince");
    openapiFields.add("activeUntil");
    openapiFields.add("bank");
    openapiFields.add("accountAccessWays");
    openapiFields.add("branchesNumber");
    openapiFields.add("bankingAppGrades");
    openapiFields.add("onlineBankingSafetyProcedures");
    openapiFields.add("personalConsultationsServiceAvailable");
    openapiFields.add("specialFeatures");
    openapiFields.add("giroCard");
    openapiFields.add("debitCard");
    openapiFields.add("creditCard");
    openapiFields.add("paymentApps");
    openapiFields.add("giroCardCashWithdrawalConditions");
    openapiFields.add("debitCardCashWithdrawalConditions");
    openapiFields.add("creditCardCashWithdrawalConditions");
    openapiFields.add("freeCashWithdrawalAbroad");
    openapiFields.add("cashWithdrawalByDebitCardInRegion");
    openapiFields.add("cashWithdrawalByCreditCardInRegion");
    openapiFields.add("cashWithdrawalInShop");
    openapiFields.add("cashDepositCondition");
    openapiFields.add("otherBankServices");
    openapiFields.add("fees");
    openapiFields.add("bonus");
    openapiFields.add("cashback");
    openapiFields.add("creditInterest");
    openapiFields.add("depositGuarantee");
    openapiFields.add("sustainabilityType");
    openapiFields.add("docs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Product
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Product.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Product is not found in the empty JSON string", Product.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Product.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Product` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `bank`
      if (jsonObj.get("bank") != null && !jsonObj.get("bank").isJsonNull()) {
        Bank.validateJsonObject(jsonObj.getAsJsonObject("bank"));
      }
      // ensure the json data is an array
      if ((jsonObj.get("accountAccessWays") != null && !jsonObj.get("accountAccessWays").isJsonNull()) && !jsonObj.get("accountAccessWays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountAccessWays` to be an array in the JSON string but got `%s`", jsonObj.get("accountAccessWays").toString()));
      }
      // validate the optional field `bankingAppGrades`
      if (jsonObj.get("bankingAppGrades") != null && !jsonObj.get("bankingAppGrades").isJsonNull()) {
        BankingAppGrades.validateJsonObject(jsonObj.getAsJsonObject("bankingAppGrades"));
      }
      // ensure the json data is an array
      if ((jsonObj.get("onlineBankingSafetyProcedures") != null && !jsonObj.get("onlineBankingSafetyProcedures").isJsonNull()) && !jsonObj.get("onlineBankingSafetyProcedures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `onlineBankingSafetyProcedures` to be an array in the JSON string but got `%s`", jsonObj.get("onlineBankingSafetyProcedures").toString()));
      }
      if ((jsonObj.get("specialFeatures") != null && !jsonObj.get("specialFeatures").isJsonNull()) && !jsonObj.get("specialFeatures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialFeatures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialFeatures").toString()));
      }
      // validate the optional field `giroCard`
      if (jsonObj.get("giroCard") != null && !jsonObj.get("giroCard").isJsonNull()) {
        GiroCard.validateJsonObject(jsonObj.getAsJsonObject("giroCard"));
      }
      // validate the optional field `debitCard`
      if (jsonObj.get("debitCard") != null && !jsonObj.get("debitCard").isJsonNull()) {
        DebitCard.validateJsonObject(jsonObj.getAsJsonObject("debitCard"));
      }
      // validate the optional field `creditCard`
      if (jsonObj.get("creditCard") != null && !jsonObj.get("creditCard").isJsonNull()) {
        CreditCard.validateJsonObject(jsonObj.getAsJsonObject("creditCard"));
      }
      // ensure the json data is an array
      if ((jsonObj.get("paymentApps") != null && !jsonObj.get("paymentApps").isJsonNull()) && !jsonObj.get("paymentApps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentApps` to be an array in the JSON string but got `%s`", jsonObj.get("paymentApps").toString()));
      }
      // validate the optional field `giroCardCashWithdrawalConditions`
      if (jsonObj.get("giroCardCashWithdrawalConditions") != null && !jsonObj.get("giroCardCashWithdrawalConditions").isJsonNull()) {
        CashWithdrawalConditions.validateJsonObject(jsonObj.getAsJsonObject("giroCardCashWithdrawalConditions"));
      }
      // validate the optional field `debitCardCashWithdrawalConditions`
      if (jsonObj.get("debitCardCashWithdrawalConditions") != null && !jsonObj.get("debitCardCashWithdrawalConditions").isJsonNull()) {
        CashWithdrawalConditions.validateJsonObject(jsonObj.getAsJsonObject("debitCardCashWithdrawalConditions"));
      }
      // validate the optional field `creditCardCashWithdrawalConditions`
      if (jsonObj.get("creditCardCashWithdrawalConditions") != null && !jsonObj.get("creditCardCashWithdrawalConditions").isJsonNull()) {
        CashWithdrawalConditions.validateJsonObject(jsonObj.getAsJsonObject("creditCardCashWithdrawalConditions"));
      }
      // validate the optional field `cashWithdrawalByDebitCardInRegion`
      if (jsonObj.get("cashWithdrawalByDebitCardInRegion") != null && !jsonObj.get("cashWithdrawalByDebitCardInRegion").isJsonNull()) {
        CashWithdrawalInRegion.validateJsonObject(jsonObj.getAsJsonObject("cashWithdrawalByDebitCardInRegion"));
      }
      // validate the optional field `cashWithdrawalByCreditCardInRegion`
      if (jsonObj.get("cashWithdrawalByCreditCardInRegion") != null && !jsonObj.get("cashWithdrawalByCreditCardInRegion").isJsonNull()) {
        CashWithdrawalInRegion.validateJsonObject(jsonObj.getAsJsonObject("cashWithdrawalByCreditCardInRegion"));
      }
      if ((jsonObj.get("cashDepositCondition") != null && !jsonObj.get("cashDepositCondition").isJsonNull()) && !jsonObj.get("cashDepositCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cashDepositCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cashDepositCondition").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("otherBankServices") != null && !jsonObj.get("otherBankServices").isJsonNull()) && !jsonObj.get("otherBankServices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherBankServices` to be an array in the JSON string but got `%s`", jsonObj.get("otherBankServices").toString()));
      }
      // validate the optional field `fees`
      if (jsonObj.get("fees") != null && !jsonObj.get("fees").isJsonNull()) {
        Fees.validateJsonObject(jsonObj.getAsJsonObject("fees"));
      }
      // validate the optional field `bonus`
      if (jsonObj.get("bonus") != null && !jsonObj.get("bonus").isJsonNull()) {
        Bonus.validateJsonObject(jsonObj.getAsJsonObject("bonus"));
      }
      // validate the optional field `cashback`
      if (jsonObj.get("cashback") != null && !jsonObj.get("cashback").isJsonNull()) {
        Cashback.validateJsonObject(jsonObj.getAsJsonObject("cashback"));
      }
      if ((jsonObj.get("depositGuarantee") != null && !jsonObj.get("depositGuarantee").isJsonNull()) && !jsonObj.get("depositGuarantee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depositGuarantee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depositGuarantee").toString()));
      }
      if ((jsonObj.get("sustainabilityType") != null && !jsonObj.get("sustainabilityType").isJsonNull()) && !jsonObj.get("sustainabilityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sustainabilityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sustainabilityType").toString()));
      }
      JsonArray jsonArraydocs = jsonObj.getAsJsonArray("docs");
      if (jsonArraydocs != null) {
        // ensure the json data is an array
        if (!jsonObj.get("docs").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `docs` to be an array in the JSON string but got `%s`", jsonObj.get("docs").toString()));
        }

        // validate the optional field `docs` (array)
        for (int i = 0; i < jsonArraydocs.size(); i++) {
          Doc.validateJsonObject(jsonArraydocs.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Product.class));

       return (TypeAdapter<T>) new TypeAdapter<Product>() {
           @Override
           public void write(JsonWriter out, Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Product read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Product given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Product
  * @throws IOException if the JSON string is invalid with respect to Product
  */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

 /**
  * Convert an instance of Product to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

