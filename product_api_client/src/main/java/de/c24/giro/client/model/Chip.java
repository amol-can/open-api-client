/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.c24.giro.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.c24.giro.client.JSON;

/**
 * Chip
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T13:18:43.362+02:00[Europe/Berlin]")
public class Chip {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_DESKTOP_LABEL_TEXT = "desktopLabelText";
  @SerializedName(SERIALIZED_NAME_DESKTOP_LABEL_TEXT)
  private String desktopLabelText;

  public static final String SERIALIZED_NAME_DESKTOP_HOVER_TEXT = "desktopHoverText";
  @SerializedName(SERIALIZED_NAME_DESKTOP_HOVER_TEXT)
  private String desktopHoverText;

  public static final String SERIALIZED_NAME_DESKTOP_PRODUCT_INFO = "desktopProductInfo";
  @SerializedName(SERIALIZED_NAME_DESKTOP_PRODUCT_INFO)
  private String desktopProductInfo;

  public static final String SERIALIZED_NAME_MOBILE_LABEL_LONG_TEXT = "mobileLabelLongText";
  @SerializedName(SERIALIZED_NAME_MOBILE_LABEL_LONG_TEXT)
  private String mobileLabelLongText;

  public static final String SERIALIZED_NAME_MOBILE_LABEL_SHORT_TEXT = "mobileLabelShortText";
  @SerializedName(SERIALIZED_NAME_MOBILE_LABEL_SHORT_TEXT)
  private String mobileLabelShortText;

  public static final String SERIALIZED_NAME_MOBILE_PRODUCT_INFO = "mobileProductInfo";
  @SerializedName(SERIALIZED_NAME_MOBILE_PRODUCT_INFO)
  private String mobileProductInfo;

  public Chip() {
  }

  public Chip enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Chip desktopLabelText(String desktopLabelText) {
    
    this.desktopLabelText = desktopLabelText;
    return this;
  }

   /**
   * Get desktopLabelText
   * @return desktopLabelText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDesktopLabelText() {
    return desktopLabelText;
  }


  public void setDesktopLabelText(String desktopLabelText) {
    this.desktopLabelText = desktopLabelText;
  }


  public Chip desktopHoverText(String desktopHoverText) {
    
    this.desktopHoverText = desktopHoverText;
    return this;
  }

   /**
   * Get desktopHoverText
   * @return desktopHoverText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDesktopHoverText() {
    return desktopHoverText;
  }


  public void setDesktopHoverText(String desktopHoverText) {
    this.desktopHoverText = desktopHoverText;
  }


  public Chip desktopProductInfo(String desktopProductInfo) {
    
    this.desktopProductInfo = desktopProductInfo;
    return this;
  }

   /**
   * Get desktopProductInfo
   * @return desktopProductInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDesktopProductInfo() {
    return desktopProductInfo;
  }


  public void setDesktopProductInfo(String desktopProductInfo) {
    this.desktopProductInfo = desktopProductInfo;
  }


  public Chip mobileLabelLongText(String mobileLabelLongText) {
    
    this.mobileLabelLongText = mobileLabelLongText;
    return this;
  }

   /**
   * Get mobileLabelLongText
   * @return mobileLabelLongText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMobileLabelLongText() {
    return mobileLabelLongText;
  }


  public void setMobileLabelLongText(String mobileLabelLongText) {
    this.mobileLabelLongText = mobileLabelLongText;
  }


  public Chip mobileLabelShortText(String mobileLabelShortText) {
    
    this.mobileLabelShortText = mobileLabelShortText;
    return this;
  }

   /**
   * Get mobileLabelShortText
   * @return mobileLabelShortText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMobileLabelShortText() {
    return mobileLabelShortText;
  }


  public void setMobileLabelShortText(String mobileLabelShortText) {
    this.mobileLabelShortText = mobileLabelShortText;
  }


  public Chip mobileProductInfo(String mobileProductInfo) {
    
    this.mobileProductInfo = mobileProductInfo;
    return this;
  }

   /**
   * Get mobileProductInfo
   * @return mobileProductInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMobileProductInfo() {
    return mobileProductInfo;
  }


  public void setMobileProductInfo(String mobileProductInfo) {
    this.mobileProductInfo = mobileProductInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chip chip = (Chip) o;
    return Objects.equals(this.enabled, chip.enabled) &&
        Objects.equals(this.desktopLabelText, chip.desktopLabelText) &&
        Objects.equals(this.desktopHoverText, chip.desktopHoverText) &&
        Objects.equals(this.desktopProductInfo, chip.desktopProductInfo) &&
        Objects.equals(this.mobileLabelLongText, chip.mobileLabelLongText) &&
        Objects.equals(this.mobileLabelShortText, chip.mobileLabelShortText) &&
        Objects.equals(this.mobileProductInfo, chip.mobileProductInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, desktopLabelText, desktopHoverText, desktopProductInfo, mobileLabelLongText, mobileLabelShortText, mobileProductInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chip {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    desktopLabelText: ").append(toIndentedString(desktopLabelText)).append("\n");
    sb.append("    desktopHoverText: ").append(toIndentedString(desktopHoverText)).append("\n");
    sb.append("    desktopProductInfo: ").append(toIndentedString(desktopProductInfo)).append("\n");
    sb.append("    mobileLabelLongText: ").append(toIndentedString(mobileLabelLongText)).append("\n");
    sb.append("    mobileLabelShortText: ").append(toIndentedString(mobileLabelShortText)).append("\n");
    sb.append("    mobileProductInfo: ").append(toIndentedString(mobileProductInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("desktopLabelText");
    openapiFields.add("desktopHoverText");
    openapiFields.add("desktopProductInfo");
    openapiFields.add("mobileLabelLongText");
    openapiFields.add("mobileLabelShortText");
    openapiFields.add("mobileProductInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Chip
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Chip.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Chip is not found in the empty JSON string", Chip.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Chip.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Chip` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("desktopLabelText") != null && !jsonObj.get("desktopLabelText").isJsonNull()) && !jsonObj.get("desktopLabelText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desktopLabelText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desktopLabelText").toString()));
      }
      if ((jsonObj.get("desktopHoverText") != null && !jsonObj.get("desktopHoverText").isJsonNull()) && !jsonObj.get("desktopHoverText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desktopHoverText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desktopHoverText").toString()));
      }
      if ((jsonObj.get("desktopProductInfo") != null && !jsonObj.get("desktopProductInfo").isJsonNull()) && !jsonObj.get("desktopProductInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desktopProductInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desktopProductInfo").toString()));
      }
      if ((jsonObj.get("mobileLabelLongText") != null && !jsonObj.get("mobileLabelLongText").isJsonNull()) && !jsonObj.get("mobileLabelLongText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileLabelLongText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileLabelLongText").toString()));
      }
      if ((jsonObj.get("mobileLabelShortText") != null && !jsonObj.get("mobileLabelShortText").isJsonNull()) && !jsonObj.get("mobileLabelShortText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileLabelShortText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileLabelShortText").toString()));
      }
      if ((jsonObj.get("mobileProductInfo") != null && !jsonObj.get("mobileProductInfo").isJsonNull()) && !jsonObj.get("mobileProductInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileProductInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileProductInfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Chip.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Chip' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Chip> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Chip.class));

       return (TypeAdapter<T>) new TypeAdapter<Chip>() {
           @Override
           public void write(JsonWriter out, Chip value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Chip read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Chip given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Chip
  * @throws IOException if the JSON string is invalid with respect to Chip
  */
  public static Chip fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Chip.class);
  }

 /**
  * Convert an instance of Chip to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

