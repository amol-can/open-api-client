/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.c24.giro.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.c24.giro.client.model.AtmWithdrawalFee;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.c24.giro.client.JSON;

/**
 * CashFees
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-31T13:18:43.362+02:00[Europe/Berlin]")
public class CashFees {
  public static final String SERIALIZED_NAME_ATM_WITHDRAWAL_EURO = "atmWithdrawalEuro";
  @SerializedName(SERIALIZED_NAME_ATM_WITHDRAWAL_EURO)
  private AtmWithdrawalFee atmWithdrawalEuro;

  public static final String SERIALIZED_NAME_ATM_WITHDRAWAL_NON_EURO = "atmWithdrawalNonEuro";
  @SerializedName(SERIALIZED_NAME_ATM_WITHDRAWAL_NON_EURO)
  private AtmWithdrawalFee atmWithdrawalNonEuro;

  public static final String SERIALIZED_NAME_BRANCH_OR_SHOP_WITHDRAWAL = "branchOrShopWithdrawal";
  @SerializedName(SERIALIZED_NAME_BRANCH_OR_SHOP_WITHDRAWAL)
  private Float branchOrShopWithdrawal;

  public static final String SERIALIZED_NAME_DEPOSIT = "deposit";
  @SerializedName(SERIALIZED_NAME_DEPOSIT)
  private Float deposit;

  public CashFees() {
  }

  public CashFees atmWithdrawalEuro(AtmWithdrawalFee atmWithdrawalEuro) {
    
    this.atmWithdrawalEuro = atmWithdrawalEuro;
    return this;
  }

   /**
   * Get atmWithdrawalEuro
   * @return atmWithdrawalEuro
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AtmWithdrawalFee getAtmWithdrawalEuro() {
    return atmWithdrawalEuro;
  }


  public void setAtmWithdrawalEuro(AtmWithdrawalFee atmWithdrawalEuro) {
    this.atmWithdrawalEuro = atmWithdrawalEuro;
  }


  public CashFees atmWithdrawalNonEuro(AtmWithdrawalFee atmWithdrawalNonEuro) {
    
    this.atmWithdrawalNonEuro = atmWithdrawalNonEuro;
    return this;
  }

   /**
   * Get atmWithdrawalNonEuro
   * @return atmWithdrawalNonEuro
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AtmWithdrawalFee getAtmWithdrawalNonEuro() {
    return atmWithdrawalNonEuro;
  }


  public void setAtmWithdrawalNonEuro(AtmWithdrawalFee atmWithdrawalNonEuro) {
    this.atmWithdrawalNonEuro = atmWithdrawalNonEuro;
  }


  public CashFees branchOrShopWithdrawal(Float branchOrShopWithdrawal) {
    
    this.branchOrShopWithdrawal = branchOrShopWithdrawal;
    return this;
  }

   /**
   * Get branchOrShopWithdrawal
   * @return branchOrShopWithdrawal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getBranchOrShopWithdrawal() {
    return branchOrShopWithdrawal;
  }


  public void setBranchOrShopWithdrawal(Float branchOrShopWithdrawal) {
    this.branchOrShopWithdrawal = branchOrShopWithdrawal;
  }


  public CashFees deposit(Float deposit) {
    
    this.deposit = deposit;
    return this;
  }

   /**
   * Get deposit
   * @return deposit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getDeposit() {
    return deposit;
  }


  public void setDeposit(Float deposit) {
    this.deposit = deposit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFees cashFees = (CashFees) o;
    return Objects.equals(this.atmWithdrawalEuro, cashFees.atmWithdrawalEuro) &&
        Objects.equals(this.atmWithdrawalNonEuro, cashFees.atmWithdrawalNonEuro) &&
        Objects.equals(this.branchOrShopWithdrawal, cashFees.branchOrShopWithdrawal) &&
        Objects.equals(this.deposit, cashFees.deposit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atmWithdrawalEuro, atmWithdrawalNonEuro, branchOrShopWithdrawal, deposit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFees {\n");
    sb.append("    atmWithdrawalEuro: ").append(toIndentedString(atmWithdrawalEuro)).append("\n");
    sb.append("    atmWithdrawalNonEuro: ").append(toIndentedString(atmWithdrawalNonEuro)).append("\n");
    sb.append("    branchOrShopWithdrawal: ").append(toIndentedString(branchOrShopWithdrawal)).append("\n");
    sb.append("    deposit: ").append(toIndentedString(deposit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("atmWithdrawalEuro");
    openapiFields.add("atmWithdrawalNonEuro");
    openapiFields.add("branchOrShopWithdrawal");
    openapiFields.add("deposit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CashFees
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CashFees.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CashFees is not found in the empty JSON string", CashFees.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CashFees.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CashFees` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `atmWithdrawalEuro`
      if (jsonObj.get("atmWithdrawalEuro") != null && !jsonObj.get("atmWithdrawalEuro").isJsonNull()) {
        AtmWithdrawalFee.validateJsonObject(jsonObj.getAsJsonObject("atmWithdrawalEuro"));
      }
      // validate the optional field `atmWithdrawalNonEuro`
      if (jsonObj.get("atmWithdrawalNonEuro") != null && !jsonObj.get("atmWithdrawalNonEuro").isJsonNull()) {
        AtmWithdrawalFee.validateJsonObject(jsonObj.getAsJsonObject("atmWithdrawalNonEuro"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CashFees.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CashFees' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CashFees> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CashFees.class));

       return (TypeAdapter<T>) new TypeAdapter<CashFees>() {
           @Override
           public void write(JsonWriter out, CashFees value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CashFees read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CashFees given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CashFees
  * @throws IOException if the JSON string is invalid with respect to CashFees
  */
  public static CashFees fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CashFees.class);
  }

 /**
  * Convert an instance of CashFees to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

